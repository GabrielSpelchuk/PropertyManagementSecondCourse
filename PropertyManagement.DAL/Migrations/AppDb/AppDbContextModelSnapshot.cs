// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PropertyManagement.DAL.Data;

#nullable disable

namespace PropertyManagement.DAL.Migrations.AppDb
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PropertyManagement.DAL.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("Properties", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Kyiv, Independence Ave. 10",
                            CreatedAt = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "2-bedroom apartment in city center",
                            OwnerId = 1,
                            Price = 85000m,
                            PropertyTypeId = 1,
                            Title = "Modern City Apartment"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Lviv, Zelenyi District, House 4",
                            CreatedAt = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Spacious house with garden",
                            OwnerId = 2,
                            Price = 125000m,
                            PropertyTypeId = 2,
                            Title = "Family Suburban House"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Dnipro, Central Ave. 15",
                            CreatedAt = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fully equipped office floor",
                            OwnerId = 3,
                            Price = 150000m,
                            PropertyTypeId = 3,
                            Title = "Office Space in Business Center"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Vinnytsia region, Stepova St.",
                            CreatedAt = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "10 ares for private construction",
                            OwnerId = 4,
                            Price = 18000m,
                            PropertyTypeId = 4,
                            Title = "Countryside Land Plot"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Chernivtsi, Universytetska St. 8",
                            CreatedAt = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Compact, affordable studio",
                            OwnerId = 5,
                            Price = 60000m,
                            PropertyTypeId = 1,
                            Title = "Studio Apartment for Students"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Ivano-Frankivsk region, Dubova St. 22",
                            CreatedAt = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cozy cottage with fireplace",
                            OwnerId = 6,
                            Price = 70000m,
                            PropertyTypeId = 2,
                            Title = "Renovated Rural House"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Poltava, Market Square",
                            CreatedAt = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ground floor store, high foot traffic",
                            OwnerId = 7,
                            Price = 98000m,
                            PropertyTypeId = 3,
                            Title = "Retail Shopfront"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Zhytomyr region, Kvitkova St.",
                            CreatedAt = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ideal for eco-house or garden",
                            OwnerId = 8,
                            Price = 15500m,
                            PropertyTypeId = 4,
                            Title = "Secluded Village Land"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Kharkiv, Sumska St. 45",
                            CreatedAt = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Open space layout, modern style",
                            OwnerId = 9,
                            Price = 89000m,
                            PropertyTypeId = 1,
                            Title = "Loft Apartment with Balcony"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Ternopil, Nova St. 19",
                            CreatedAt = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Garage and small backyard included",
                            OwnerId = 10,
                            Price = 110000m,
                            PropertyTypeId = 2,
                            Title = "Two-Storey Townhouse"
                        },
                        new
                        {
                            Id = 11,
                            Address = "Odesa Port Zone",
                            CreatedAt = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Industrial storage, truck access",
                            OwnerId = 11,
                            Price = 130000m,
                            PropertyTypeId = 3,
                            Title = "Warehouse with Dock Access"
                        },
                        new
                        {
                            Id = 12,
                            Address = "Rivne region, Berehova St.",
                            CreatedAt = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quiet and green surroundings",
                            OwnerId = 12,
                            Price = 17000m,
                            PropertyTypeId = 4,
                            Title = "Scenic Land Near River"
                        },
                        new
                        {
                            Id = 13,
                            Address = "Kyiv, Khreschatyk 21",
                            CreatedAt = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Top floor with elevator",
                            OwnerId = 13,
                            Price = 200000m,
                            PropertyTypeId = 1,
                            Title = "Luxury Downtown Apartment"
                        },
                        new
                        {
                            Id = 14,
                            Address = "Cherkasy region, Molodizhna St. 10",
                            CreatedAt = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Modern plan, ready to move in",
                            OwnerId = 14,
                            Price = 105000m,
                            PropertyTypeId = 2,
                            Title = "New Brick House"
                        },
                        new
                        {
                            Id = 15,
                            Address = "Lviv Old Town, Rynok Square",
                            CreatedAt = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Historic building with large windows",
                            OwnerId = 15,
                            Price = 115000m,
                            PropertyTypeId = 3,
                            Title = "Cafe Space in Tourist Area"
                        });
                });

            modelBuilder.Entity("PropertyManagement.DAL.Entities.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Apartment"
                        },
                        new
                        {
                            Id = 2,
                            Name = "House"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Commercial"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Land Plot"
                        });
                });

            modelBuilder.Entity("PropertyManagement.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "olena.t@example.com",
                            FullName = "Olena Tkachenko",
                            PasswordHash = "hashed1",
                            Role = "Seller"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ivan.p@example.com",
                            FullName = "Ivan Petrenko",
                            PasswordHash = "hashed2",
                            Role = "Buyer"
                        },
                        new
                        {
                            Id = 3,
                            Email = "maria.k@example.com",
                            FullName = "Maria Koval",
                            PasswordHash = "hashed3",
                            Role = "Seller"
                        },
                        new
                        {
                            Id = 4,
                            Email = "andrii.s@example.com",
                            FullName = "Andrii Shevchenko",
                            PasswordHash = "hashed4",
                            Role = "Buyer"
                        },
                        new
                        {
                            Id = 5,
                            Email = "natalia.m@example.com",
                            FullName = "Natalia Melnyk",
                            PasswordHash = "hashed5",
                            Role = "Seller"
                        },
                        new
                        {
                            Id = 6,
                            Email = "oleksii.g@example.com",
                            FullName = "Oleksii Hnatiuk",
                            PasswordHash = "hashed6",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 7,
                            Email = "tetiana.s@example.com",
                            FullName = "Tetiana Savchuk",
                            PasswordHash = "hashed7",
                            Role = "Buyer"
                        },
                        new
                        {
                            Id = 8,
                            Email = "yurii.l@example.com",
                            FullName = "Yurii Lysenko",
                            PasswordHash = "hashed8",
                            Role = "Seller"
                        },
                        new
                        {
                            Id = 9,
                            Email = "oksana.k@example.com",
                            FullName = "Oksana Kravchuk",
                            PasswordHash = "hashed9",
                            Role = "Seller"
                        },
                        new
                        {
                            Id = 10,
                            Email = "volodymyr.o@example.com",
                            FullName = "Volodymyr Ostapchuk",
                            PasswordHash = "hashed10",
                            Role = "Buyer"
                        },
                        new
                        {
                            Id = 11,
                            Email = "svitlana.b@example.com",
                            FullName = "Svitlana Bondar",
                            PasswordHash = "hashed11",
                            Role = "Seller"
                        },
                        new
                        {
                            Id = 12,
                            Email = "max.kozak@example.com",
                            FullName = "Maxym Kozak",
                            PasswordHash = "hashed12",
                            Role = "Buyer"
                        },
                        new
                        {
                            Id = 13,
                            Email = "iryna.s@example.com",
                            FullName = "Iryna Sereda",
                            PasswordHash = "hashed13",
                            Role = "Seller"
                        },
                        new
                        {
                            Id = 14,
                            Email = "roman.d@example.com",
                            FullName = "Roman Dubenko",
                            PasswordHash = "hashed14",
                            Role = "Buyer"
                        },
                        new
                        {
                            Id = 15,
                            Email = "katia.y@example.com",
                            FullName = "Kateryna Yushchenko",
                            PasswordHash = "hashed15",
                            Role = "Seller"
                        });
                });

            modelBuilder.Entity("PropertyManagement.DAL.Entities.Property", b =>
                {
                    b.HasOne("PropertyManagement.DAL.Entities.User", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyManagement.DAL.Entities.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("PropertyManagement.DAL.Entities.User", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
